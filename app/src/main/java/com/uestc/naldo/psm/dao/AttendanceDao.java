package com.uestc.naldo.psm.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.uestc.naldo.psm.model.Attendance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE".
*/
public class AttendanceDao extends AbstractDao<Attendance, Long> {

    public static final String TABLENAME = "ATTENDANCE";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property TrainerId = new Property(3, long.class, "trainerId", false, "TRAINER_ID");
    }

    private Query<Attendance> trainer_AttendancesQuery;

    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"DATE\" INTEGER," + // 2: date
                "\"TRAINER_ID\" INTEGER NOT NULL );"); // 3: trainerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Attendance entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
        stmt.bindLong(4, entity.getTrainerId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
        stmt.bindLong(4, entity.getTrainerId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.getLong(offset + 3) // trainerId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTrainerId(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Attendance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Attendance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Attendance entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attendances" to-many relationship of Trainer. */
    public List<Attendance> _queryTrainer_Attendances(long trainerId) {
        synchronized (this) {
            if (trainer_AttendancesQuery == null) {
                QueryBuilder<Attendance> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TrainerId.eq(null));
                trainer_AttendancesQuery = queryBuilder.build();
            }
        }
        Query<Attendance> query = trainer_AttendancesQuery.forCurrentThread();
        query.setParameter(0, trainerId);
        return query.list();
    }

}
